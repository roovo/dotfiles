#!/usr/bin/env bash

set -e

DOTFILES_ROOT="`pwd`"

overwrite_all=false
backup_all=false
skip_all=false

if [[ "$#" -eq 3 ]]; then
  backup_all=true
fi

clash_option=$1
git_author_name=$2
git_author_email=$3
github_user_name=$4

if [[ "${clash_option}" == "B" ]]; then
  backup_all=true
elif [[ "${clash_option}" == "S" ]]; then
  skip_all=true
fi

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    if [ -z "${git_author_name}" ]; then
      user ' - What is your git author name?'
      read -e git_author_name
    fi

    if [ -z "${git_author_email}" ]; then
      user ' - What is your git author email?'
      read -e git_author_email
    fi

    if [ -z "${github_user_name}" ]; then
      user ' - What is your github username?'
      read -e github_user_name
    fi
    sed -e "s/GIT_AUTHOR_NAME/$git_author_name/g" -e "s/GIT_AUTHOR_EMAIL/$git_author_email/g" -e "s/GITHUB_USER_NAME/$github_user_name/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

echo -e "\n  All installed!"
